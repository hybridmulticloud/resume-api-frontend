name: Deploy Frontend to S3 (Dynamic API + Secure Bucket)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      GH_TOKEN:              ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      AWS_REGION:            ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gh

      - name: Get Backend Run ID
        id: get_run
        run: |
          echo "üëâ Fetching latest backend run..."
          RUN_ID=$(gh run list \
            --repo hybridmulticloud/resume-api-backend \
            --workflow "Deploy Backend Infrastructure" \
            --branch main \
            --limit 1 \
            --json databaseId \
            --jq '.[0].databaseId')
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "‚Üí backend run id is $RUN_ID"

      - name: Download infra-outputs artifact
        run: |
          echo "‚¨áÔ∏è  Downloading infra-outputs from run $RUN_ID"
          gh run download \
            "$RUN_ID" \
            --repo hybridmulticloud/resume-api-backend \
            --name infra-outputs \
            --dir infra-artifacts

      - name: Show raw artifact contents
        run: |
          echo "---- frontend_bucket_name.txt ----"
          cat infra-artifacts/frontend_bucket_name.txt
          echo "---- cloudfront_distribution_id.txt ----"
          cat infra-artifacts/cloudfront_distribution_id.txt

      - name: Parse & export clean bucket + dist ID
        run: |
          # Extract only the first chunk of word, digits, dots or hyphens:
          BUCKET=$(grep -Eo '^[A-Za-z0-9.-]+' infra-artifacts/frontend_bucket_name.txt)
          DIST_ID=$(grep -Eo '^[A-Za-z0-9]+' infra-artifacts/cloudfront_distribution_id.txt)

          if [[ -z "$BUCKET" || -z "$DIST_ID" ]]; then
            echo "‚ùå Failed to parse bucket or distribution id"
            exit 1
          fi

          echo "‚úÖ Parsed bucket      : $BUCKET"
          echo "‚úÖ Parsed dist-id     : $DIST_ID"

          # Export for later steps
          echo "FRONTEND_BUCKET_NAME=$BUCKET"   >> $GITHUB_ENV
          echo "CLOUDFRONT_DIST_ID=$DIST_ID"    >> $GITHUB_ENV

      - name: Build index.html
        run: |
          API_URL="https://${FRONTEND_BUCKET_NAME}/UpdateVisitorCount"
          echo "Generating index.html with API_URL=$API_URL"
          envsubst '${API_URL}' < public/index.tmpl.html > public/index.html

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region:            ${{ env.AWS_REGION }}
          aws-access-key-id:     ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Sync site to S3
        run: |
          echo "üì§ Syncing site to s3://${FRONTEND_BUCKET_NAME}"
          aws s3 sync public/ s3://$FRONTEND_BUCKET_NAME \
            --delete \
            --cache-control "index.html=max-age=0,no-cache,no-store" \
            --cache-control "*.css=max-age=86400" \
            --cache-control "*.js=max-age=86400"

      - name: Confirm distribution exists
        run: |
          echo "üîç Checking CloudFront distribution $CLOUDFRONT_DIST_ID"
          aws cloudfront get-distribution --id $CLOUDFRONT_DIST_ID

      - name: Invalidate CloudFront cache
        run: |
          echo "üöÄ Creating invalidation for $CLOUDFRONT_DIST_ID"
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DIST_ID \
            --paths "/index.html" "/*.css" "/*.js"
